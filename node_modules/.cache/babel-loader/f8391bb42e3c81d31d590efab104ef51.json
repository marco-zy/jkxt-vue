{"remainingRequest":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Java项目\\vue-manage-system-4.2.0\\src\\components\\page\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\src\\components\\page\\Dashboard.vue","mtime":1683269947687},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\babel.config.js","mtime":1593951026000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1681546634000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/Java\\u9879\\u76EE/vue-manage-system-4.2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.function.name\";\n//import Schart from 'vue-schart';\nimport { dashprocount, dashdevcount, dashmisscount, dashproselect, dashusercount } from \"../../api/index\";\nimport { province, city, project, mission } from \"../../api/index\";\n//import bus from '../common/bus';\nexport default {\n  name: 'dashboard',\n  data: function data() {\n    return {\n      name: localStorage.getItem('ms_username'),\n      nowDate: '',\n      nowTime: '',\n      center: {\n        lng: 104.969052,\n        lat: 33.377164\n      },\n      //\n      zoom: 5,\n      projectcount: '',\n      devicecount: '',\n      missioncount: '',\n      markers: [],\n      inforWindow: {\n        id: '',\n        projectNo: '',\n        projectName: '',\n        startTime: '',\n        manager: '',\n        province: '',\n        city: '',\n        lng: '',\n        lat: '',\n        status: '',\n        createTime: '',\n        updateTime: ''\n      },\n      boundaryname: '',\n      coordination: {\n        lat: '',\n        lng: ''\n      },\n      doundarycolor: '',\n      filterText: '',\n      usecount: '',\n      //////////////     \n      props: {\n        label: \"label\",\n        isLeaf: \"isLeaf\"\n      }\n    };\n  },\n  components: {\n    /* //Schart */\n  },\n  computed: {\n    role: function role() {\n      return this.name === 'admin' ? '超级管理员' : '普通用户';\n    }\n  },\n  // created() {\n  //     this.handleListener();\n  //     this.changeDate();\n  // },\n  // activated() {\n  //     this.handleListener();\n  // },\n  // deactivated() {\n  //     window.removeEventListener('resize', this.renderChart);\n  //     bus.$off('collapse', this.handleBus);\n  // },\n  created: function created() {\n    this.currentTime();\n    this.proselect();\n    this.getprovince();\n    this.dashcount();\n  },\n  mounted: function mounted() {\n    this.currentTime();\n    this.proselect();\n    this.getprovince();\n    this.dashcount();\n  },\n  watch: {\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  methods: {\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    ///页面跳转\n    toProject: function toProject() {\n      this.$router.push('/Project');\n      this.dashcount();\n    },\n    toMission: function toMission() {\n      this.$router.push('/Mission');\n      this.dashcount();\n    },\n    toDevice: function toDevice() {\n      this.$router.push('/Device');\n      this.dashcount();\n    },\n    toUser: function toUser() {\n      this.$router.push('/User');\n      this.dashcount();\n    },\n    dashcount: function dashcount() {\n      this.procount();\n      this.devcount();\n      this.misscount();\n      this.usercount();\n    },\n    /////////\n    // 绑定click事件\n    /////\n    loadNode: function loadNode(node, resolve) {\n      //如果展开第一级节点，从后台加载一级节点列表******省\n      if (node.level == 0) {\n        this.loadfirstnode(resolve);\n      }\n      //如果展开市节点，动态从后台加载下一级节点列表******市\n      if (node.level == 1) {\n        this.loadcitynode(node, resolve);\n      }\n      //如果展开项目节点，动态从后台加载下一级节点列表******项目\n      if (node.level == 2) {\n        this.loadprojectnode(node, resolve);\n      }\n      if (node.level == 3) {\n        this.loadmissionnode(node, resolve);\n        //console.log(node)\n      }\n    },\n    //省\n    loadfirstnode: function () {\n      var _loadfirstnode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve) {\n        var params, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              params = {\n                level: 0\n              };\n              _context.next = 3;\n              return province();\n            case 3:\n              res = _context.sent;\n              return _context.abrupt(\"return\", resolve(res));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function loadfirstnode(_x) {\n        return _loadfirstnode.apply(this, arguments);\n      }\n      return loadfirstnode;\n    }(),\n    //市\n    loadcitynode: function () {\n      var _loadcitynode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(node, resolve) {\n        var params, res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              params = {\n                province: node.label\n              };\n              _context2.next = 3;\n              return city(params);\n            case 3:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", resolve(res));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function loadcitynode(_x2, _x3) {\n        return _loadcitynode.apply(this, arguments);\n      }\n      return loadcitynode;\n    }(),\n    //项目\n    loadprojectnode: function () {\n      var _loadprojectnode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(node, resolve) {\n        var params, res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              params = {\n                city: node.label\n              };\n              _context3.next = 3;\n              return project(params);\n            case 3:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", resolve(res));\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function loadprojectnode(_x4, _x5) {\n        return _loadprojectnode.apply(this, arguments);\n      }\n      return loadprojectnode;\n    }(),\n    //任务\n    loadmissionnode: function () {\n      var _loadmissionnode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(node, resolve) {\n        var params, res;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(node);\n              params = {\n                projectId: node.data.objId\n              };\n              _context4.next = 4;\n              return mission(params);\n            case 4:\n              res = _context4.sent;\n              console.log(res);\n              return _context4.abrupt(\"return\", resolve(res));\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function loadmissionnode(_x6, _x7) {\n        return _loadmissionnode.apply(this, arguments);\n      }\n      return loadmissionnode;\n    }(),\n    //设备\n    loaddevicenode: function () {\n      var _loaddevicenode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(node, resolve) {\n        var params, res;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              params = {\n                city: node.label\n              };\n              _context5.next = 3;\n              return project(params);\n            case 3:\n              res = _context5.sent;\n              return _context5.abrupt(\"return\", resolve(res));\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function loaddevicenode(_x8, _x9) {\n        return _loaddevicenode.apply(this, arguments);\n      }\n      return loaddevicenode;\n    }(),\n    ///////////\n    handleNodeClick: function handleNodeClick(data) {\n      //console.log(data);\n\n      //新增一个属性\n      if (data.level == \"province\") {\n        //alert(\"province\")\n\n        this.center = {};\n        this.center = data.label;\n        this.boundaryname = data.label;\n        this.zoom = 8;\n      } else if (data.level == \"city\") {\n        this.center = {};\n        this.center = data.label;\n        this.boundaryname = data.label;\n        this.zoom = 10;\n\n        //alert(\"city\")\n      } else if (data.level == \"project\") {\n        this.coordination.lat = data.lat;\n        this.coordination.lng = data.lng;\n        this.center = this.coordination;\n        this.zoom = 16;\n        //alert(\"project\")\n      }\n    },\n    // 点击点坐标赋值\n    lookDetail: function lookDetail(marker) {\n      marker.showFlag = true;\n      this.inforWindow = marker;\n\n      // this.inforWindow\n\n      //alert(this.infoWindow.lat,this.infoWindow.lng);\n    },\n    // 关闭弹窗\n    infoWindowClose: function infoWindowClose(marker) {\n      marker.showFlag = false;\n    },\n    // 打开弹窗\n    infoWindowOpen: function infoWindowOpen(marker) {\n      marker.showFlag = true;\n    },\n    procount: function procount() {\n      var _this = this;\n      dashprocount().then(function (res) {\n        _this.projectcount = res;\n      });\n    },\n    devcount: function devcount() {\n      var _this2 = this;\n      dashdevcount().then(function (res) {\n        _this2.devicecount = res;\n      });\n    },\n    misscount: function misscount() {\n      var _this3 = this;\n      dashmisscount().then(function (res) {\n        _this3.missioncount = res;\n      });\n    },\n    usercount: function usercount() {\n      var _this4 = this;\n      dashusercount().then(function (res) {\n        _this4.usecount = res;\n      });\n    },\n    proselect: function proselect() {\n      var _this5 = this;\n      dashproselect().then(function (res) {\n        return [_this5.markers = res];\n      });\n    },\n    getprovince: function getprovince() {\n      var _this6 = this;\n      province().then(function (res) {\n        _this6.treeData1 = res;\n        //alert(this.treeData1);\n      });\n    },\n    ////树状图加载\n    ////树状图加载\n    changeDate: function changeDate() {\n      var now = new Date().getTime();\n      this.data.forEach(function (item, index) {\n        var date = new Date(now - (6 - index) * 86400000);\n        item.name = \"\".concat(date.getFullYear(), \"/\").concat(date.getMonth() + 1, \"/\").concat(date.getDate());\n      });\n    },\n    getDate: function getDate() {\n      var date = new Date();\n      var year = date.getFullYear(); // 年\n      var month = date.getMonth() + 1; // 月\n      var day = date.getDate(); // 日\n      var week = date.getDay(); // 星期\n      var weekArr = [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"];\n      var hour = date.getHours(); // 时\n      hour = hour < 10 ? \"0\" + hour : hour; // 如果只有一位，则前面补零\n      var minute = date.getMinutes(); // 分\n      minute = minute < 10 ? \"0\" + minute : minute; // 如果只有一位，则前面补零\n      var second = date.getSeconds(); // 秒\n      second = second < 10 ? \"0\" + second : second; // 如果只有一位，则前面补零\n      this.nowDate = \"\".concat(year, \"\\u5E74\").concat(month, \"\\u6708\").concat(day, \"\\u65E5 \").concat(weekArr[week]);\n      this.nowTime = \"\".concat(hour, \"\\u65F6\").concat(minute, \"\\u5206\").concat(second, \"\\u79D2\");\n    },\n    currentTime: function currentTime() {\n      var _this7 = this;\n      setInterval(function () {\n        _this7.getDate();\n      }, 500);\n    },\n    handler: function handler(_ref) {\n      var BMap = _ref.BMap,\n        map = _ref.map;\n      console.log(BMap, map);\n      this.center.lng = 116.404;\n      this.center.lat = 39.915;\n      this.zoom = 15;\n    }\n  }\n};",null]}