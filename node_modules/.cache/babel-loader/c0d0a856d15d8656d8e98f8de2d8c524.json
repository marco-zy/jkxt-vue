{"remainingRequest":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\thread-loader\\dist\\cjs.js!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Java项目\\vue-manage-system-4.2.0\\src\\components\\page\\Project.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\src\\components\\page\\Project.vue","mtime":1683278056404},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\babel.config.js","mtime":1593951026000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1681546634000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/web.dom.iterable\";\nvar geoc = null;\nimport { BaiduMap, BmNavigation, BmView, BmGeolocation, BmCityList } from 'vue-baidu-map';\nimport { proupdate, proDelete, devnotbound } from \"../../api/index\";\nimport { projectSelect, proinsertT, selectprovince, selectcity, selectmanager } from \"../../api/index\";\nimport { devbound } from \"../../api/index\";\nexport default {\n  name: 'basetable',\n  components: {\n    BaiduMap: BaiduMap,\n    BmNavigation: BmNavigation,\n    BmView: BmView,\n    BmGeolocation: BmGeolocation,\n    BmCityList: BmCityList\n  },\n  ///\n  data: function data() {\n    return {\n      ///\n\n      center: {\n        lng: 117.063035,\n        lat: 36.672767\n      },\n      zoom: 12,\n      locData: {\n        longitude: '',\n        latitude: '',\n        address: '',\n        city: '',\n        province: ''\n      },\n      clientHeight: document.documentElement.clientHeight - 600,\n      // 屏幕高度 \n      //clientHeight:document.documentElement.clientHeight-450, // 屏幕高度\n      iconUrl: 'http://api.map.baidu.com/img/markers.png',\n      search: '',\n      searchOption: [],\n      loading: false,\n      keyword: '',\n      ///\n\n      query: {\n        manager: '',\n        province: '',\n        city: '',\n        status: '',\n        page: 1,\n        pagesize: 8,\n        deviceName: ''\n      },\n      tableData: [],\n      multipleSelection: [],\n      multipleSelectionId: [],\n      delList: [],\n      editVisible: false,\n      insertVisible: false,\n      positionVisible: false,\n      pageTotal: 0,\n      form: {\n        id: '',\n        projectName: '',\n        startTime: '',\n        finishTime: '',\n        manager: '',\n        status: ''\n      },\n      temp: {\n        id: '',\n        projectName: '',\n        startTime: '',\n        finishTime: '',\n        manager: '',\n        status: ''\n      },\n      idx: -1,\n      id: -1,\n      testId: '',\n      formData: '',\n      searchData: [],\n      selectExecutor: \"\",\n      editId: '',\n      missionCount: '',\n      edit: {\n        status: '',\n        executorName: ''\n      },\n      //时间选择器数据\n      pickerOptions: {\n        shortcuts: [{\n          text: '今天',\n          onClick: function onClick(picker) {\n            picker.$emit('pick', new Date());\n          }\n        }, {\n          text: '昨天',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '一周前',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', date);\n          }\n        }]\n      },\n      editTime: '',\n      editTime1: '',\n      insert: {\n        projectNo: '',\n        projectName: '',\n        startTime: '',\n        finishTime: '',\n        manager: '',\n        province: '',\n        city: '',\n        lng: '',\n        lat: '',\n        status: '',\n        address: '',\n        deviceid: ''\n      },\n      provincelist: [],\n      citylist: [],\n      managerlist: [],\n      devlist: [],\n      flag: '',\n      //insert表单的规则\n      rules: {\n        projectNo: [{\n          required: true,\n          message: '请输入项目编号',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 8,\n          message: '长度在 1 到 8 个字符',\n          trigger: 'blur'\n        }],\n        projectName: [{\n          required: true,\n          message: '请输入项目名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 8,\n          message: '长度在 1 到 8 个字符',\n          trigger: 'blur'\n        }],\n        projectId: [{\n          required: true,\n          message: '请输入所属项目ID',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 8,\n          message: '长度在 1 到 8 个字符',\n          trigger: 'blur'\n        }],\n        manager: [{\n          required: true,\n          message: '请输入负责人',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 8,\n          message: '长度在 1 到 8 个字符',\n          trigger: 'blur'\n        }],\n        status: [{\n          required: true,\n          message: '请选择状态',\n          trigger: 'change'\n        }\n        // { min: 1, max: 8, message: '长度在 1 到 8 个字符', trigger: 'blur' }\n        ],\n\n        province: [{\n          required: true,\n          message: '请输入所属省',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 8,\n          message: '长度在 1 到 8 个字符',\n          trigger: 'blur'\n        }],\n        city: [{\n          required: true,\n          message: '请输入所属市',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 15,\n          message: '长度在 1 到 15 个字符',\n          trigger: 'blur'\n        }],\n        lng: [{\n          required: true,\n          message: '请输入经度',\n          trigger: 'blur'\n        }\n        // { min: 1, max: 10, message: '长度在 1 到 10 个字符', trigger: 'blur' }\n        ],\n\n        lat: [{\n          required: true,\n          message: '请输入纬度',\n          trigger: 'blur'\n        }\n        // { min: 1, max: 10, message: '长度在 1 到 10 个字符', trigger: 'blur' }\n        ],\n\n        insertTime: [{\n          type: 'string',\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        insertTime1: [{\n          type: 'string',\n          message: '请选择完成时间',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getData();\n  },\n  methods: {\n    ////\n    handler: function handler(_ref) {\n      var BMap = _ref.BMap,\n        map = _ref.map;\n      var _this = this; // 设置一个临时变量指向vue实例，因为在百度地图回调里使用this，指向的不是vue实例；\n      var geolocation = new BMap.Geolocation();\n      geolocation.getCurrentPosition(function (r) {\n        //console.log(r);\n        _this.center = {\n          lng: r.longitude,\n          lat: r.latitude\n        }; // 设置center属性值\n        _this.autoLocationPoint = {\n          lng: r.longitude,\n          lat: r.latitude\n        }; // 自定义覆盖物\n        _this.initLocation = true;\n      }, {\n        enableHighAccuracy: true\n      });\n      window.map = map;\n    },\n    typeCheck: function typeCheck(v) {\n      try {\n        this.tableData.forEach(function (item) {\n          if (item.projectNo == v) throw new Error(\"type-check-error\");\n        });\n        return true;\n      } catch (e) {\n        if (e.message == \"type-check-error\") {\n          //可以接不同的error\n          this.$message({\n            message: '项目编号已存在',\n            //换成对应的\n            type: 'warning'\n          });\n          return false;\n        }\n      }\n    },\n    getdev: function getdev() {\n      var _this2 = this;\n      devnotbound().then(function (res) {\n        _this2.devlist = res;\n      });\n    },\n    //下面这个函数没问题*****************\n    clickEvent: function clickEvent(e) {\n      map.clearOverlays();\n      var Icon_0 = new BMap.Icon(\"http://api.map.baidu.com/img/markers.png\", new BMap.Size(23, 25), {\n        offset: new BMap.Size(10, 25),\n        // 指定定位位置  \n        imageOffset: new BMap.Size(0, 0 - 10 * 25)\n      });\n      var myMarker = new BMap.Marker(new BMap.Point(e.point.lng, e.point.lat), {\n        icon: Icon_0\n      });\n      map.addOverlay(myMarker);\n\n      //用所定位的经纬度查找所在地省市街道等信息\n      var point = new BMap.Point(e.point.lng, e.point.lat);\n      var gc = new BMap.Geocoder();\n      var _this = this;\n      gc.getLocation(point, function (rs) {\n        var addComp = rs.addressComponents;\n        //console.log(rs.address);//地址信息\n        _this.locData.address = rs.address;\n        _this.locData.province = addComp.province;\n        _this.locData.city = addComp.city;\n        _this.locData.district = addComp.district;\n      });\n      _this.locData.longitude = e.point.lng;\n      _this.locData.latitude = e.point.lat;\n    },\n    //获取当前位置\n    //也没问题\n    getLoctionSuccess: function getLoctionSuccess(point, AddressComponent, marker) {\n      map.clearOverlays();\n      var Icon_0 = new BMap.Icon(\"http://api.map.baidu.com/img/markers.png\", new BMap.Size(23, 25), {\n        offset: new BMap.Size(10, 25),\n        // 指定定位位置  \n        imageOffset: new BMap.Size(0, 0 - 10 * 25)\n      });\n      var myMarker = new BMap.Marker(new BMap.Point(point.point.lng, point.point.lat), {\n        icon: Icon_0\n      });\n      map.addOverlay(myMarker);\n      this.locData.longitude = point.point.lng;\n      this.locData.latitude = point.point.lat;\n      var point = new BMap.Point(point.point.lng, point.point.lat);\n      var gc = new BMap.Geocoder();\n      var _this = this;\n      gc.getLocation(point, function (rs) {\n        var addComp = rs.addressComponents;\n        _this.locData.address = rs.address;\n        //格式\n      });\n    },\n    mapNameChange: function mapNameChange(e, data) {\n      var _this3 = this;\n      this.loading = true;\n      if (!e && !this.search) {\n        return false;\n      }\n      var that = this,\n        point,\n        marker = null;\n      geoc = new BMap.Geocoder();\n      var local = new BMap.LocalSearch(map, {\n        renderOptions: {\n          map: map\n        },\n        onSearchComplete: function onSearchComplete(res) {\n          _this3.loading = false;\n          // console.log(res);\n          if (res) {\n            if (data !== \"change\") {\n              that.searchOption = res.Kr;\n            }\n            if (res.Kr.length > 0) {\n              that.$set(that.locData, 'longitude', res.Kr[0].point.lng);\n              that.$set(that.locData, 'latitude', res.Kr[0].point.lat);\n            }\n          }\n          if (local.getResults() != undefined) {\n            map.clearOverlays(); //清除地图上所有覆盖物\n            if (local.getResults().getPoi(0)) {\n              point = local.getResults().getPoi(0).point; //获取第一个智能搜索的结果\n              map.centerAndZoom(point, 10);\n              marker = new BMap.Marker(point); // 创建标注\n              map.addOverlay(marker); // 将标注添加到地图中\n              marker.enableDragging(); // 可拖拽\n              geoc.getLocation(point, function (rs) {\n                var addComp = rs.addressComponents;\n                that.$set(that.locData, 'address', addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber);\n                that.$set(that.locData, 'province', addComp.province);\n                that.$set(that.locData, 'city', addComp.city);\n              });\n            } else {\n              _this3.$message('未匹配到地点!可拖动地图上的红色图标到精确位置');\n            }\n          } else {\n            _this3.$message(\"未找到搜索结果\");\n          }\n        }\n      });\n      local.search(e || this.search);\n    },\n    findlocation: function findlocation() {\n      //alert(this.locData.longitude);\n      this.positionVisible = false;\n      this.$emit(\"mapLocationSave\", this.locData);\n      this.insert.lng = this.locData.longitude; //\n      this.insert.lat = this.locData.latitude; //\n\n      this.insert.address = this.locData.address; //\n\n      this.insert.province = this.locData.province;\n      this.insert.city = this.locData.city;\n      this.insert.district = this.locData.district;\n      positionVisible = false;\n    },\n    clearSearch: function clearSearch() {\n      this.loading = false;\n    },\n    close: function close() {\n      this.positionVisible = false;\n      this.$emit('mapLocationClose');\n    },\n    ////\n    getprovince: function getprovince() {\n      var _this4 = this;\n      selectprovince().then(function (res) {\n        _this4.provincelist = res;\n        //alert(this.provincelist)\n      });\n    },\n    getcity: function getcity() {\n      var _this5 = this;\n      selectcity(this.query.province).then(function (res) {\n        _this5.citylist = [];\n        _this5.query.city = '';\n        _this5.citylist = res;\n        //alert(this.citylist);\n      });\n    },\n    getmanager: function getmanager() {\n      var _this6 = this;\n      selectmanager().then(function (res) {\n        _this6.managerlist = res;\n      });\n    },\n    getData: function getData() {\n      var _this7 = this;\n      projectSelect(this.query).then(function (res) {\n        _this7.tableData = res.list;\n        _this7.pageTotal = res.pageTotal; //|| 50;\n        alert(pageTotal);\n      });\n      //this.getprovince();\n      //this.getmanager();\n    },\n    all: function all() {\n      var _this8 = this;\n      //getprovince();\n      this.$set(this.query, 'page', 1);\n      this.query.status = '';\n      this.query.manager = '';\n      this.query.city = '';\n      this.query.province = '';\n      projectSelect(this.query).then(function (res) {\n        _this8.tableData = res.list;\n        _this8.pageTotal = res.pageTotal; // || 50;\n      });\n    },\n    // 触发搜索按钮this.query.status='';\n    handleSearch: function handleSearch() {\n      var _this9 = this;\n      //getprovince();\n      this.$set(this.query, 'page', 1);\n      //this.missionCount = 1;\n      projectSelect(this.query).then(function (res) {\n        _this9.tableData = res.list;\n        _this9.pageTotal = res.pageTotal; //去掉了 || 50;\n      });\n    },\n    selectPage: function (_selectPage) {\n      function selectPage() {\n        return _selectPage.apply(this, arguments);\n      }\n      selectPage.toString = function () {\n        return _selectPage.toString();\n      };\n      return selectPage;\n    }(function () {\n      var _this10 = this;\n      selectPage(0, 10).then(function (res) {\n        _this10.tableData = res.list;\n      });\n    }),\n    // 删除操作\n    handleDelete: function handleDelete(index, row, rowId) {\n      var _this11 = this;\n      // 二次确认删除\n      this.$confirm('确定要删除吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        _this11.$message.success('删除成功');\n        _this11.tableData.splice(index, 1);\n        proDelete(rowId);\n      }).catch(function () {});\n    },\n    // 多选操作\n    handleSelectionChange: function handleSelectionChange(val) {\n      var _this12 = this;\n      //清空上一次的多选情况\n      //因为这一次可能有多选项被取消选中\n      this.multipleSelection = [];\n      this.multipleSelectionId = [];\n\n      //alert(index);\n\n      this.multipleSelection = val; //原始的\n      //alert(this.multipleSelection);\n\n      val.forEach(function (element) {\n        _this12.multipleSelectionId.push(element.id);\n      });\n    },\n    delAllSelection: function delAllSelection() {\n      var _this13 = this;\n      var length = this.multipleSelectionId.length;\n      var str = '';\n      var str1 = '';\n      var num = length;\n      this.delList = this.delList.concat(this.multipleSelectionId);\n      //alert(this.delList);\n      for (var i = 0; i < length; i++) {\n        if (i != num - 1) {\n          str += this.multipleSelectionId[i] + ','; //str为ID\n          str1 += this.multipleSelection[i].projectNo + '、';\n        } else {\n          str += this.multipleSelectionId[i];\n          str1 += this.multipleSelection[i].projectNo;\n        }\n      }\n      this.$confirm('确定要删除吗？', '提示', {\n        type: 'warning'\n      }).then(function () {\n        proDelete(str);\n        //this.$message.success('删除成功');\n        _this13.$message.error(\"\\u5220\\u9664\\u4E86\\u9879\\u76EE\".concat(str1, \"\\uFF0C\\u5171\").concat(num, \"\\u6761\\u6570\\u636E\"));\n      }).catch(function () {});\n      this.multipleSelection = [];\n    },\n    // 编辑操作\n    handleEdit: function handleEdit(index, row, id) {\n      //index 只是这条数据在前端中的数值\n\n      this.idx = index;\n      this.form = row;\n      this.temp = row;\n      this.editVisible = true;\n      this.editId = id;\n    },\n    // 保存编辑\n    saveEdit: function saveEdit(editId) {\n      this.editVisible = false;\n      this.$message.success(\"\\u4FEE\\u6539\\u7B2C \".concat(this.idx + 1, \" \\u884C\\u6210\\u529F\"));\n      this.$set(this.tableData, this.idx, this.form);\n      //updateData(editId,this.form.status,this.form.executorName,this.editTime,this.editTime1);\n\n      proupdate(this.form);\n      //打补丁，否则修改第二个信息的时候会显示第一次输入\n      this.editTime = '';\n      this.editTime1 = '';\n    },\n    cancelEdit: function cancelEdit() {\n      this.form = this.temp;\n      this.$set(this.tableData, this.idx, this.temp);\n      this.editVisible = false;\n    },\n    handleInsert: function handleInsert() {\n      this.insert = {};\n\n      //清除选点弹窗中的keyword\n      this.keyword = '';\n      this.insertVisible = true;\n    },\n    submitForm: function submitForm(insertForm) {\n      var _this14 = this;\n      this.$refs[insertForm].validate(function (valid) {\n        if (valid) {\n          proinsertT(_this14.insert);\n          devbound(_this14.insert.deviceid, _this14.insert.projectNo);\n          _this14.insertVisible = false;\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    resetForm: function resetForm(insertForm) {\n      //重置表单内容\n      this.$refs[insertForm].resetFields();\n    },\n    // 分页导航\n    handlePageChange: function handlePageChange(val) {\n      this.$set(this.query, 'page', val);\n      this.getData();\n    }\n  }\n};",null]}