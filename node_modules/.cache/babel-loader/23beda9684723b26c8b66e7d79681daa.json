{"remainingRequest":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-baidu-map\\components\\overlays\\InfoWindow.vue","mtime":1681694602000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\babel.config.js","mtime":1593951026000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\babel-loader\\lib\\index.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681546634000},{"path":"E:\\Java项目\\vue-manage-system-4.2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1681546634000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport commonMixin from \"../base/mixins/common.js\";\nimport bindEvents from \"../base/bindEvent.js\";\nimport { createPoint, createSize } from \"../base/factory.js\";\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show: function show(val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow();\n    },\n    'position.lng': function positionLng(val, oldVal) {\n      this.reload();\n    },\n    'position.lat': function positionLat(val, oldVal) {\n      this.reload();\n    },\n    'offset.width': function offsetWidth(val, oldVal) {\n      this.reload();\n    },\n    'offset.height': function offsetHeight(val) {\n      this.reload();\n    },\n    maxWidth: function maxWidth() {\n      this.reload();\n    },\n    width: function width(val) {\n      this.originInstance.setWidth(val);\n    },\n    height: function height(val) {\n      this.originInstance.setHeight(val);\n    },\n    title: function title(val) {\n      this.originInstance.setTitle(val);\n    },\n    maximize: function maximize(val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize();\n    },\n    autoPan: function autoPan(val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan();\n    },\n    closeOnClick: function closeOnClick(val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick();\n    }\n  },\n  methods: {\n    redraw: function redraw() {\n      this.originInstance.redraw();\n    },\n    load: function load() {\n      var BMap = this.BMap,\n        map = this.map,\n        show = this.show,\n        title = this.title,\n        width = this.width,\n        height = this.height,\n        maxWidth = this.maxWidth,\n        offset = this.offset,\n        autoPan = this.autoPan,\n        closeOnClick = this.closeOnClick,\n        message = this.message,\n        maximize = this.maximize,\n        bindObserver = this.bindObserver,\n        $parent = this.$parent;\n      var $content = this.$el;\n      var overlay = new BMap.InfoWindow($content, {\n        width: width,\n        height: height,\n        title: title,\n        maxWidth: maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message: message\n      });\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize();\n      bindEvents.call(this, overlay);\n      this.originInstance = overlay;\n      overlay.redraw();\n      [].forEach.call($content.querySelectorAll('img'), function ($img) {\n        $img.onload = function () {\n          return overlay.redraw();\n        };\n      });\n      bindObserver();\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map;\n      show && this.openInfoWindow();\n    },\n    bindObserver: function bindObserver() {\n      var MutationObserver = global.MutationObserver;\n      if (!MutationObserver) {\n        return;\n      }\n      var $el = this.$el,\n        originInstance = this.originInstance;\n      this.observer = new MutationObserver(function (mutations) {\n        return originInstance.redraw();\n      });\n      this.observer.observe($el, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    },\n    openInfoWindow: function openInfoWindow() {\n      var BMap = this.BMap,\n        $container = this.$container,\n        position = this.position,\n        originInstance = this.originInstance;\n      $container.openInfoWindow(originInstance, createPoint(BMap, position));\n    },\n    closeInfoWindow: function closeInfoWindow() {\n      this.$container.closeInfoWindow(this.originInstance);\n    }\n  }\n};",{"version":3,"names":["commonMixin","bindEvents","createPoint","createSize","name","mixins","props","show","type","Boolean","position","Object","title","String","width","Number","height","maxWidth","offset","maximize","autoPan","closeOnClick","default","message","watch","val","openInfoWindow","closeInfoWindow","positionLng","oldVal","reload","positionLat","offsetWidth","offsetHeight","originInstance","setWidth","setHeight","setTitle","enableMaximize","disableMaximize","enableAutoPan","disableAutoPan","enableCloseOnClick","disableCloseOnClick","methods","redraw","load","BMap","map","bindObserver","$parent","$content","$el","overlay","InfoWindow","enableMessage","call","forEach","querySelectorAll","$img","onload","$container","MutationObserver","global","observer","mutations","observe","attributes","childList","characterData","subtree"],"sources":["node_modules/vue-baidu-map/components/overlays/InfoWindow.vue"],"sourcesContent":["<template>\n<div v-show=\"show\">\n  <slot></slot>\n</div>\n</template>\n\n<script>\nimport commonMixin from '../base/mixins/common.js'\nimport bindEvents from '../base/bindEvent.js'\nimport {createPoint, createSize} from '../base/factory.js'\n\nexport default {\n  name: 'bm-info-window',\n  mixins: [commonMixin('overlay')],\n  props: {\n    show: {\n      type: Boolean\n    },\n    position: {\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    width: {\n      type: Number\n    },\n    height: {\n      type: Number\n    },\n    maxWidth: {\n      type: Number\n    },\n    offset: {\n      type: Object\n    },\n    maximize: {\n      type: Boolean\n    },\n    autoPan: {\n      type: Boolean\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    message: {\n      type: String\n    }\n  },\n  watch: {\n    show (val) {\n      val ? this.openInfoWindow() : this.closeInfoWindow()\n    },\n    'position.lng' (val, oldVal) {\n      this.reload()\n    },\n    'position.lat' (val, oldVal) {\n      this.reload()\n    },\n    'offset.width' (val, oldVal) {\n      this.reload()\n    },\n    'offset.height' (val) {\n      this.reload()\n    },\n    maxWidth () {\n      this.reload()\n    },\n    width (val) {\n      this.originInstance.setWidth(val)\n    },\n    height (val) {\n      this.originInstance.setHeight(val)\n    },\n    title (val) {\n      this.originInstance.setTitle(val)\n    },\n    maximize (val) {\n      val ? this.originInstance.enableMaximize() : this.originInstance.disableMaximize()\n    },\n    autoPan (val) {\n      val ? this.originInstance.enableAutoPan() : this.originInstance.disableAutoPan()\n    },\n    closeOnClick (val) {\n      val ? this.originInstance.enableCloseOnClick() : this.originInstance.disableCloseOnClick()\n    }\n  },\n  methods: {\n    redraw () {\n      this.originInstance.redraw()\n    },\n    load () {\n      const {BMap, map, show, title, width, height, maxWidth, offset, autoPan, closeOnClick, message, maximize, bindObserver, $parent} = this\n      const $content = this.$el\n      const overlay = new BMap.InfoWindow($content, {\n        width,\n        height,\n        title,\n        maxWidth,\n        offset: createSize(BMap, offset),\n        enableAutoPan: autoPan,\n        enableCloseOnClick: closeOnClick,\n        enableMessage: typeof message === 'undefined',\n        message\n      })\n\n      maximize ? overlay.enableMaximize() : overlay.disableMaximize()\n      bindEvents.call(this, overlay)\n      this.originInstance = overlay\n      overlay.redraw()\n      ;[].forEach.call($content.querySelectorAll('img'), $img => {\n        $img.onload = () => overlay.redraw()\n      })\n      bindObserver()\n      this.$container = $parent.originInstance && $parent.originInstance.openInfoWindow ? $parent.originInstance : map\n      show && this.openInfoWindow()\n    },\n    bindObserver () {\n      const MutationObserver = global.MutationObserver\n      if (!MutationObserver) {\n        return\n      }\n      const {$el, originInstance} = this\n      this.observer = new MutationObserver(mutations => originInstance.redraw())\n      this.observer.observe($el, {attributes: true, childList: true, characterData: true, subtree: true})\n    },\n    openInfoWindow () {\n      const {BMap, $container, position, originInstance} = this\n      $container.openInfoWindow(originInstance, createPoint(BMap, position))\n    },\n    closeInfoWindow () {\n      this.$container.closeInfoWindow(this.originInstance)\n    }\n  }\n}\n</script>\n"],"mappings":";;AAOA,OAAAA,WAAA;AACA,OAAAC,UAAA;AACA,SAAAC,WAAA,EAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAL,WAAA;EACAM,KAAA;IACAC,IAAA;MACAC,IAAA,EAAAC;IACA;IACAC,QAAA;MACAF,IAAA,EAAAG;IACA;IACAC,KAAA;MACAJ,IAAA,EAAAK;IACA;IACAC,KAAA;MACAN,IAAA,EAAAO;IACA;IACAC,MAAA;MACAR,IAAA,EAAAO;IACA;IACAE,QAAA;MACAT,IAAA,EAAAO;IACA;IACAG,MAAA;MACAV,IAAA,EAAAG;IACA;IACAQ,QAAA;MACAX,IAAA,EAAAC;IACA;IACAW,OAAA;MACAZ,IAAA,EAAAC;IACA;IACAY,YAAA;MACAb,IAAA,EAAAC,OAAA;MACAa,OAAA;IACA;IACAC,OAAA;MACAf,IAAA,EAAAK;IACA;EACA;EACAW,KAAA;IACAjB,IAAA,WAAAA,KAAAkB,GAAA;MACAA,GAAA,QAAAC,cAAA,UAAAC,eAAA;IACA;IACA,yBAAAC,YAAAH,GAAA,EAAAI,MAAA;MACA,KAAAC,MAAA;IACA;IACA,yBAAAC,YAAAN,GAAA,EAAAI,MAAA;MACA,KAAAC,MAAA;IACA;IACA,yBAAAE,YAAAP,GAAA,EAAAI,MAAA;MACA,KAAAC,MAAA;IACA;IACA,0BAAAG,aAAAR,GAAA;MACA,KAAAK,MAAA;IACA;IACAb,QAAA,WAAAA,SAAA;MACA,KAAAa,MAAA;IACA;IACAhB,KAAA,WAAAA,MAAAW,GAAA;MACA,KAAAS,cAAA,CAAAC,QAAA,CAAAV,GAAA;IACA;IACAT,MAAA,WAAAA,OAAAS,GAAA;MACA,KAAAS,cAAA,CAAAE,SAAA,CAAAX,GAAA;IACA;IACAb,KAAA,WAAAA,MAAAa,GAAA;MACA,KAAAS,cAAA,CAAAG,QAAA,CAAAZ,GAAA;IACA;IACAN,QAAA,WAAAA,SAAAM,GAAA;MACAA,GAAA,QAAAS,cAAA,CAAAI,cAAA,UAAAJ,cAAA,CAAAK,eAAA;IACA;IACAnB,OAAA,WAAAA,QAAAK,GAAA;MACAA,GAAA,QAAAS,cAAA,CAAAM,aAAA,UAAAN,cAAA,CAAAO,cAAA;IACA;IACApB,YAAA,WAAAA,aAAAI,GAAA;MACAA,GAAA,QAAAS,cAAA,CAAAQ,kBAAA,UAAAR,cAAA,CAAAS,mBAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA,WAAAA,OAAA;MACA,KAAAX,cAAA,CAAAW,MAAA;IACA;IACAC,IAAA,WAAAA,KAAA;MACA,IAAAC,IAAA,QAAAA,IAAA;QAAAC,GAAA,QAAAA,GAAA;QAAAzC,IAAA,QAAAA,IAAA;QAAAK,KAAA,QAAAA,KAAA;QAAAE,KAAA,QAAAA,KAAA;QAAAE,MAAA,QAAAA,MAAA;QAAAC,QAAA,QAAAA,QAAA;QAAAC,MAAA,QAAAA,MAAA;QAAAE,OAAA,QAAAA,OAAA;QAAAC,YAAA,QAAAA,YAAA;QAAAE,OAAA,QAAAA,OAAA;QAAAJ,QAAA,QAAAA,QAAA;QAAA8B,YAAA,QAAAA,YAAA;QAAAC,OAAA,QAAAA,OAAA;MACA,IAAAC,QAAA,QAAAC,GAAA;MACA,IAAAC,OAAA,OAAAN,IAAA,CAAAO,UAAA,CAAAH,QAAA;QACArC,KAAA,EAAAA,KAAA;QACAE,MAAA,EAAAA,MAAA;QACAJ,KAAA,EAAAA,KAAA;QACAK,QAAA,EAAAA,QAAA;QACAC,MAAA,EAAAf,UAAA,CAAA4C,IAAA,EAAA7B,MAAA;QACAsB,aAAA,EAAApB,OAAA;QACAsB,kBAAA,EAAArB,YAAA;QACAkC,aAAA,SAAAhC,OAAA;QACAA,OAAA,EAAAA;MACA;MAEAJ,QAAA,GAAAkC,OAAA,CAAAf,cAAA,KAAAe,OAAA,CAAAd,eAAA;MACAtC,UAAA,CAAAuD,IAAA,OAAAH,OAAA;MACA,KAAAnB,cAAA,GAAAmB,OAAA;MACAA,OAAA,CAAAR,MAAA;MACA,GAAAY,OAAA,CAAAD,IAAA,CAAAL,QAAA,CAAAO,gBAAA,mBAAAC,IAAA;QACAA,IAAA,CAAAC,MAAA;UAAA,OAAAP,OAAA,CAAAR,MAAA;QAAA;MACA;MACAI,YAAA;MACA,KAAAY,UAAA,GAAAX,OAAA,CAAAhB,cAAA,IAAAgB,OAAA,CAAAhB,cAAA,CAAAR,cAAA,GAAAwB,OAAA,CAAAhB,cAAA,GAAAc,GAAA;MACAzC,IAAA,SAAAmB,cAAA;IACA;IACAuB,YAAA,WAAAA,aAAA;MACA,IAAAa,gBAAA,GAAAC,MAAA,CAAAD,gBAAA;MACA,KAAAA,gBAAA;QACA;MACA;MACA,IAAAV,GAAA,QAAAA,GAAA;QAAAlB,cAAA,QAAAA,cAAA;MACA,KAAA8B,QAAA,OAAAF,gBAAA,WAAAG,SAAA;QAAA,OAAA/B,cAAA,CAAAW,MAAA;MAAA;MACA,KAAAmB,QAAA,CAAAE,OAAA,CAAAd,GAAA;QAAAe,UAAA;QAAAC,SAAA;QAAAC,aAAA;QAAAC,OAAA;MAAA;IACA;IACA5C,cAAA,WAAAA,eAAA;MACA,IAAAqB,IAAA,QAAAA,IAAA;QAAAc,UAAA,QAAAA,UAAA;QAAAnD,QAAA,QAAAA,QAAA;QAAAwB,cAAA,QAAAA,cAAA;MACA2B,UAAA,CAAAnC,cAAA,CAAAQ,cAAA,EAAAhC,WAAA,CAAA6C,IAAA,EAAArC,QAAA;IACA;IACAiB,eAAA,WAAAA,gBAAA;MACA,KAAAkC,UAAA,CAAAlC,eAAA,MAAAO,cAAA;IACA;EACA;AACA"}]}